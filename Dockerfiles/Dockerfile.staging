# base node image
FROM node:16-bullseye-slim as base

# set for base and all layer that inherit from it
ENV NODE_ENV production

# Install openssl for Prisma
RUN apt-get update && apt-get install -y openssl sqlite3

# Install all node_modules, including dev dependencies
FROM base as deps

WORKDIR /myapp

ADD package.json package-lock.json ./
RUN npm install --production=false

# Setup production node_modules
FROM base as production-deps

WORKDIR /myapp

COPY --from=deps /myapp/node_modules /myapp/node_modules
ADD package.json package-lock.json ./
RUN npm prune --production

# Build the app
FROM base as build

WORKDIR /myapp

COPY --from=deps /myapp/node_modules /myapp/node_modules

ADD prisma .
RUN npx prisma generate

ADD . .
RUN npm run build

# Finally, build the production image with minimal footprint
FROM base
RUN --mount=type=secret,id=PLANETSCALE_PRISMA_DATABASE_URL_STAGING \
ARG PLANETSCALE_PRISMA_DATABASE_URL_STAGING = $(cat /run/secrets/PLANETSCALE_PRISMA_DATABASE_URL_STAGING)
ENV PLANETSCALE_PRISMA_DATABASE_URL="${PLANETSCALE_PRISMA_DATABASE_URL_STAGING}"
ENV PORT="8080"
ENV NODE_ENV="production"
RUN --mount=type=secret,id=VAPID_PUBLIC_KEY \
ARG VAPID_PUBLIC_KEY = $(cat /run/secrets/VAPID_PUBLIC_KEY)
ENV VAPID_PUBLIC_KEY="${VAPID_PUBLIC_KEY}"
RUN --mount=type=secret,id=VAPID_PRIVATE_KEY \
ARG VAPID_PRIVATE_KEY = $(cat /run/secrets/VAPID_PRIVATE_KEY)
ENV VAPID_PRIVATE_KEY="${VAPID_PRIVATE_KEY}"

WORKDIR /myapp

COPY --from=production-deps /myapp/node_modules /myapp/node_modules
COPY --from=build /myapp/node_modules/.prisma /myapp/node_modules/.prisma

COPY --from=build /myapp/build /myapp/build
COPY --from=build /myapp/public /myapp/public

ADD . .

EXPOSE 3306
EXPOSE 8080

RUN npx prisma db push --accept-data-loss

CMD ["npm", "start"]
